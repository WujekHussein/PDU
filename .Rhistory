install.packages('microbenchmark')
library('microbenchmark')
microbenchmark(sql_1(Users), base_1(Users), dplyr_1(Users), table_1(Users))
library('data.table')
microbenchmark(sql_1(Users), base_1(Users), dplyr_1(Users), table_1(Users))
sql_1 <- function(Users){
sqldf("SELECT Location, SUM(UpVotes) as TotalUpVotes
FROM Users
WHERE Location != ''
GROUP BY Location
ORDER BY TotalUpVotes DESC
LIMIT 10")
}
microbenchmark(sql_1(Users), base_1(Users), dplyr_1(Users), table_1(Users))
library('sqldf')
microbenchmark(sql_1(Users), base_1(Users), dplyr_1(Users), table_1(Users))
sql_2 <- function(Posts){
sqldf("SELECT STRFTIME('%Y', CreationDate) AS Year, STRFTIME('%m', CreationDate) AS Month,
COUNT(*) AS PostsNumber, MAX(Score) AS MaxScore
FROM Posts
WHERE PostTypeId IN (1, 2)
GROUP BY Year, Month
HAVING PostsNumber > 1000")
}
SQLDF2 <- sql_2(Posts)
View(SQLDF2)
View(Posts)
posts_with_correct_id <- Posts[,Posts$PostTypeId==1 || Posts$PostTypeId==2]
remove(posts_with_correct_id)
posts_with_correct_id <- Posts[Posts$PostTypeId==1 || Posts$PostTypeId==2,]
posts_with_correct_id <- Posts[Posts$PostTypeId<3,]
View(posts_with_correct_id)
posts_with_correct_id <- Posts[Posts$PostTypeId<1,]
posts_with_correct_id <- Posts[Posts$PostTypeId<3,]
posts_with_correct_id$Year <- format(as.Date(posts_with_correct_id$CreationDate), "%Y")
posts_with_correct_id$Month <- format(as.Date(posts_with_correct_id$CreationDate), "%M")
posts_with_correct_id$Month <- format(as.Date(posts_with_correct_id$CreationDate), "%m")
posts_number_counted <- aggregate(cbind(PostsNumber = id, MaxScore=Score)~Year+Month, data=posts_with_correct_id,FUN=function(x) {c(length(x),max(x))})
posts_number_counted <- aggregate(as.data.frame(cbind(PostsNumber = id, MaxScore=Score))~Year+Month, data=posts_with_correct_id, FUN=function(x) {c(length(x),max(x))})
posts_number_counted <- aggregate(as.data.frame(cbind(PostsNumber = id, MaxScore=Score))~Year+Month, data=posts_with_correct_id, FUN = list(PostsNumber = length, MaxScore = max))
posts_number_counted <- aggregate(cbind(PostsNumber = Id, MaxScore=Score)~Year+Month, data=posts_with_correct_id, FUN=function(x) {c(length(x),max(x))})
View(posts_with_correct_id)
View(posts_number_counted)
?aggregate
posts_number_counted <- aggregate(cbind(PostsNumber = Id, MaxScore=Score)~Year+Month, data=posts_with_correct_id, FUN=length})
posts_number_counted <- aggregate(PostsNumber = Id~Year+Month, data=posts_with_correct_id, FUN=length)
posts_number_counted <- aggregate(PostsNumber = Id~Year+Month, data=posts_with_correct_id, FUN=length(x))
posts_number_counted <- aggregate(PostsNumber = Id~Year+Month, data=posts_with_correct_id, FUN=funtion {length(x)})
posts_number_counted <- aggregate(PostsNumber = Id~Year+Month, data=posts_with_correct_id, FUN=function(x) {length(x)})
posts_number_counted <- aggregate((PostsNumber = Id)~Year+Month, data=posts_with_correct_id, FUN=function(x) {length(x)})
posts_number_counted <- aggregate(Id~Year+Month, data=posts_with_correct_id, FUN=function(x) {length(x)})
posts_max_cal <- aggregate(Score~Year+Month, data=posts_with_correct_id, FUN=max)
View(posts_max_cal)
names(posts_number_counted)[3]="PostsNumber"
posts_number_counted$MaxScore <- posts_number_counted$Score
posts_number_counted$MaxScore <- posts_number_cal$Score
posts_number_counted$MaxScore <- posts_max_cal$Score
result <- posts_number_counted[posts_number_counted$PostsNumber>1000]
result <- posts_number_counted[posts_number_counted$PostsNumber>1000,]
View(result)
result <- result[order(resul$Year)]
result <- result[order(result$Year)]
result <- result[order(result$Year),]
result <- posts_number_counted[posts_number_counted$PostsNumber>1000,]
result <- result[order(result$Year),]
all_equal(SQLDF2,result)
remove(result, posts_max_cal, posts_number_counted, posts_with_correct_id)
base_2 <- function(Posts){
posts_with_correct_id <- Posts[Posts$PostTypeId<3,]
posts_with_correct_id$Year <- format(as.Date(posts_with_correct_id$CreationDate), "%Y")
posts_with_correct_id$Month <- format(as.Date(posts_with_correct_id$CreationDate), "%m")
posts_number_counted <- aggregate(Id~Year+Month, data=posts_with_correct_id, FUN=function(x) {length(x)})
posts_max_cal <- aggregate(Score~Year+Month, data=posts_with_correct_id, FUN=max)
names(posts_number_counted)[3]="PostsNumber"
posts_number_counted$MaxScore <- posts_max_cal$Score
result <- posts_number_counted[posts_number_counted$PostsNumber>1000,]
result <- result[order(result$Year),]
}
BASE2 <- base_2(Posts)
View(BASE2)
all_equal(SQLDF2,BASE2)
Posts %>%
filter(PostTypeId<3)%>%
select(CreationDate, Id, Score)%>%
mutate(Year = format(as.Date(CreationDate), "%Y"), Month = format(as.Date(CreationDate), "%m")) -> costam
View(costam)
View(costam)
Posts %>%
filter(PostTypeId<3)%>%
select(CreationDate, Id, Score)%>%
mutate(Year = format(as.Date(CreationDate), "%Y"), Month = format(as.Date(CreationDate), "%m"))%>%
group_by(Year,Month)%>%
summarise(PostsNumber =n(), MaxScore=max(Score)) -> costam
View(costam)
dplyr_2 <- function(Posts){
Posts %>%
filter(PostTypeId<3)%>%
select(CreationDate, Id, Score)%>%
mutate(Year = format(as.Date(CreationDate), "%Y"), Month = format(as.Date(CreationDate), "%m"))%>%
group_by(Year,Month)%>%
summarise(PostsNumber =n(), MaxScore=max(Score))%>%
filter(PostsNumber>1000)->wyn
}
dplyr_2 <- function(Posts){
Posts %>%
filter(PostTypeId<3)%>%
select(CreationDate, Id, Score)%>%
mutate(Year = format(as.Date(CreationDate), "%Y"), Month = format(as.Date(CreationDate), "%m"))%>%
group_by(Year,Month)%>%
summarise(PostsNumber =n(), MaxScore=max(Score))%>%
filter(PostsNumber>1000)
}
Posts %>%
filter(PostTypeId<3)%>%
select(CreationDate, Id, Score)%>%
mutate(Year = format(as.Date(CreationDate), "%Y"), Month = format(as.Date(CreationDate), "%m"))%>%
group_by(Year,Month)%>%
summarise(PostsNumber =n(), MaxScore=max(Score))%>%
filter(PostsNumber>1000) -> costam
all_equal(SQLDF2,costam)
remove(costam)
dplyr_2 <- function(Posts){
Posts %>%
filter(PostTypeId<3)%>%
select(CreationDate, Id, Score)%>%
mutate(Year = format(as.Date(CreationDate), "%Y"), Month = format(as.Date(CreationDate), "%m"))%>%
group_by(Year,Month)%>%
summarise(PostsNumber =n(), MaxScore=max(Score))%>%
filter(PostsNumber>1000) -> costam
}
dplyr_2(Posts) -> DPLYR2
View(DPLYR2)
all_equal(SQLDF2,DPLYR2)
View(Posts)
as.data.table(Posts)[PostTypeId<3,.(CreationDate, Id, Score)] -> chlop_pofiltrowany
View(chlop_pofiltrowany)
remove(chlop_pofiltrowany)
as.data.table(Posts)[PostTypeId<3,.(CreationDate, Id, Score)] -> chlop_pofiltrowany_odroczony
View(chlop_pofiltrowany_odroczony)
chlop_pofiltrowany_odroczony[[, Year := format(as.Date(CreationDate), "%Y")]]
chlop_pofiltrowany_odroczony[, Year := format(as.Date(CreationDate), "%Y")]
chlop_pofiltrowany_odroczony[, Year := format(as.Date(CreationDate), "%Y")] -> chlop_pofiltrowany_odroczony
chlop_pofiltrowany_odroczony[, Year = format(as.Date(CreationDate), "%Y")] -> chlop_pofiltrowany_odroczony
chlop_pofiltrowany_odroczony[, Year := format(as.Date(CreationDate), "%Y")] -> chlop_pofiltrowany_odroczony
chlop_pofiltrowany_odroczony[, Month := format(as.Date(CreationDate), "%m")] -> chlop_pofiltrowany_odroczony
chlop_pofiltrowany_odroczony[, Month := format(as.Date(CreationDate), "%m")] -> nowy_chlop_pofiltrowany_odroczony
View(Posts)
View(nowy_chlop_pofiltrowany_odroczony)
as.data.table(Posts)[PostTypeId<3,.(CreationDate, Id, Score)] -> chlop_pofiltrowany_odroczony
chlop_pofiltrowany_odroczony[, Year := format(as.Date(CreationDate), "%Y")] -> nowy_chlop_pofiltrowany_odroczony
nowszy_chlop <- nowy_chlop_pofiltrowany_odroczony[, Month :=format(as.Date(CreationDate), "%m")]
View(nowszy_chlop)
remove(chlop_pofiltrowany_odroczony,nowy_chlop_pofiltrowany_odroczony)
View(total_upvotes)
remove(total_upvotes)
agregowany_chlop <- nowszy_chlop[,.(PostsNumber = .N, MaxScore = max(Score)), by=.(Year,Month)]
View(agregowany_chlop)
wyn<- agregowany_chlop[PostsNumber>1000]
View(wyn)
table_2 <- function(Posts){
as.data.table(Posts)[PostTypeId<3,.(CreationDate, Id, Score)] -> chlop_pofiltrowany_odroczony
chlop_pofiltrowany_odroczony[, Year := format(as.Date(CreationDate), "%Y")] -> nowy_chlop_pofiltrowany_odroczony
nowszy_chlop <- nowy_chlop_pofiltrowany_odroczony[, Month :=format(as.Date(CreationDate), "%m")]
agregowany_chlop <- nowszy_chlop[,.(PostsNumber = .N, MaxScore = max(Score)), by=.(Year,Month)]
wyn<- agregowany_chlop[PostsNumber>1000]
}
TABLE2 <- table_2(Posts)
all_equal(TABLE2, SQLDF2)
remove(wyn,nowszy_chlop)
remove(agregowany_chlop)
microbenchmark(sql_2(Posts), base_2(Posts), dplyr_2(Posts), table_2(Posts))
base_2 <- function(Posts){
posts_with_correct_id <- Posts[Posts$PostTypeId<3,]
posts_with_correct_id$Year <- strftime(as.Date(CreationDate), format = "%Y")
posts_with_correct_id$Month <- strftime(as.Date(CreationDate), format = "%m")
posts_number_counted <- aggregate(Id~Year+Month, data=posts_with_correct_id, FUN=function(x) {length(x)})
posts_max_cal <- aggregate(Score~Year+Month, data=posts_with_correct_id, FUN=max)
names(posts_number_counted)[3]="PostsNumber"
posts_number_counted$MaxScore <- posts_max_cal$Score
result <- posts_number_counted[posts_number_counted$PostsNumber>1000,]
result <- result[order(result$Year),]
}
BASE2 <- base_2(Posts)
View(Posts)
base_2 <- function(Posts){
posts_with_correct_id <- Posts[Posts$PostTypeId<3,]
posts_with_correct_id$Year <- strftime(as.Date(posts_with_correct_id$CreationDate), format = "%Y")
posts_with_correct_id$Month <- strftime(as.Date(posts_with_correct_id$CreationDate), format = "%m")
posts_number_counted <- aggregate(Id~Year+Month, data=posts_with_correct_id, FUN=function(x) {length(x)})
posts_max_cal <- aggregate(Score~Year+Month, data=posts_with_correct_id, FUN=max)
names(posts_number_counted)[3]="PostsNumber"
posts_number_counted$MaxScore <- posts_max_cal$Score
result <- posts_number_counted[posts_number_counted$PostsNumber>1000,]
result <- result[order(result$Year),]
}
View(Posts)
BASE2 <- base_2(Posts)
all_equal(BASE2,SQLDF2)
dplyr_2 <- function(Posts){
options(dplyr.summarise.inform = FALSE)
Posts %>%
filter(PostTypeId<3)%>%
select(CreationDate, Id, Score)%>%
mutate(Year = format(as.Date(CreationDate), "%Y"), Month = format(as.Date(CreationDate), "%m"))%>%
group_by(Year,Month)%>%
summarise(PostsNumber =n(), MaxScore=max(Score))%>%
filter(PostsNumber>1000) -> costam
}
DPLYR2=dplyr_2(Posts)
all_equal(SQLDF2,DPLYR2)
microbenchmark(sql_2(Posts), base_2(Posts), dplyr_2(Posts), table_2(Posts))
dplyr_2 <- function(Posts){
Posts %>%
filter(PostTypeId<3)%>%
select(CreationDate, Id, Score)%>%
mutate(Year = format(as.Date(CreationDate), "%Y"), Month = format(as.Date(CreationDate), "%m"))%>%
group_by(Year,Month)%>%
summarise(PostsNumber =n(), MaxScore=max(Score))%>%
filter(PostsNumber>1000) -> costam
}
library('sqldf')
library('dplyr')
library(data.table)
sql_3 <- function(Posts, Users){
sqldf("SELECT Id, DisplayName, TotalViews
FROM (
SELECT OwnerUserId, SUM(ViewCount) as TotalViews
FROM Posts
WHERE PostTypeId = 1
GROUP BY OwnerUserId
) AS Questions
JOIN Users
ON Users.Id = Questions.OwnerUserId
ORDER BY TotalViews DESC
LIMIT 10")
}
SQLDF3 <- sql_3(Posts, Users)
View(SQLDF3)
post_filter <- Posts[Posts$PostTypeId==1,]
View(post_filter)
Questions <- aggregate(ViewCount~OwnerUserId, data=post_filter, FUN=sum)
names(Questions)[2] <- "TotalViews"
View(Questions)
Questions <- merge(Questions, Users, by.x=OwnerUserId, by.y=Id, all.x=TRUE)
Questions <- merge(Questions, Users, by.x="OwnerUserId", by.y="Id", all.x=TRUE)
Questions <- Questions[order(-Questions$TotalViews), c("Id", "DisplayName", "TotalViews")]
Questions <- Questions[order(-Questions$TotalViews), c("OwnerUserId", "DisplayName", "TotalViews")]
base_3 <- function(Posts, Users){
post_filter <- Posts[Posts$PostTypeId==1,]
Questions <- aggregate(ViewCount~OwnerUserId, data=post_filter, FUN=sum)
names(Questions)[2] <- "TotalViews"
Questions <- merge(Questions, Users, by.x="OwnerUserId", by.y="Id", all.x=TRUE)
Questions <- Questions[order(-Questions$TotalViews), c("OwnerUserId", "DisplayName", "TotalViews")]
names(Questions)[1] <- "Id"
Questions[1:10, ]
}
BASE3 <- base_3(Posts, Users)
View(BASE3)
all_equal(SQLDF3, BASE3)
remove(post_filter, Questions)
opstions(dplyr.summarise.inform=FALSE)
options(dplyr.summarise.inform=FALSE)
Posts %>%
filter(PostTypeId==1) %>%
group_by(OwnerUserId) %>%
summarise(TotalViews=sum(ViewCount)) -> check
View(check)
dplyr_2 <- function(Posts){
Posts %>%
filter(PostTypeId<3)%>%
mutate(Year = format(as.Date(CreationDate), "%Y"), Month = format(as.Date(CreationDate), "%m"))%>%
group_by(Year,Month)%>%
summarise(PostsNumber =n(), MaxScore=max(Score))%>%
filter(PostsNumber>1000) -> costam
}
DPLYR2 < dplyr_2(Posts)
DPLYR2 <- dplyr_2(Posts)
all_equal(SQLDF2, DPLYR2)
microbenchmark(sql_2(Posts), base_2(Posts), dplyr_2(Posts), table_2(Posts))
library('microbenchmark')
microbenchmark(sql_2(Posts), base_2(Posts), dplyr_2(Posts), table_2(Posts))
Posts %>%
filter(PostTypeId==1) %>%
group_by(OwnerUserId) %>%
summarise(TotalViews=sum(ViewCount)) %>%
inner_join(Users, by=c("OwnerUserId"="Id")) -> pok
View(pok)
Posts %>%
filter(PostTypeId==1) %>%
group_by(OwnerUserId) %>%
summarise(TotalViews=sum(ViewCount)) %>%
select(OwnerUserId, TotalViews)%>%
inner_join(Users, by=c("OwnerUserId"="Id")) -> pok
Posts %>%
filter(PostTypeId==1) %>%
group_by(OwnerUserId) %>%
summarise(TotalViews=sum(ViewCount)) %>%
inner_join(Users, by=c("OwnerUserId"="Id")) %>%
select(Id=OwnerUserId, DisplayName, TotalViews) -> pok
Posts %>%
filter(PostTypeId==1) %>%
group_by(OwnerUserId) %>%
summarise(TotalViews=sum(ViewCount)) %>%
inner_join(Users, by=c("OwnerUserId"="Id")) %>%
select(Id=OwnerUserId, DisplayName, TotalViews) %>%
arrange(-TotalViews) %>%
slice(1:10) -> pok
all_equal(pok, BASE3)
remove(check, pok)
dplyr_3 <- function(Posts, Users){
Posts %>%
filter(PostTypeId==1) %>%
group_by(OwnerUserId) %>%
summarise(TotalViews=sum(ViewCount)) %>%
inner_join(Users, by=c("OwnerUserId"="Id")) %>%
select(Id=OwnerUserId, DisplayName, TotalViews) %>%
arrange(-TotalViews) %>%
slice(1:10)
}
DPLYR3 <- dplyr_3(Posts, Users)
all_equal(DPLYR3, BASE3)
Questions <- as.data.table(Posts)[OwnerUserId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
View(Questions)
Questions <- as.data.table(Posts)[OwnerUserId=1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- Users[Questions, on=c(Id="OwnerUserId")]
Questions <- Users[Questions, on = c(Id = "OwnerUserId")]
Questions <- Users[Questions, on = c(Id == "OwnerUserId")]
Questions <- as.data.table(Users)[Questions, on = c(Id == "OwnerUserId")]
Questions <- as.data.table(Users)[Questions, on = c(Id = "OwnerUserId")]
table_1 <- function(Users){
wyn <- setorder(as.data.table(Users)[Location!='', .(TotalUpVotes=sum(UpVotes)), by=Location], -TotalUpVotes)[1:10] #wszystko w jednej linii, bo mogę
}
TABLE1 <- table_1(Users)
View(TABLE1)
all_equal(DPLYR1, TABLE1)
Questions <- setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews)[1:10]
all_equal(Questions,DPLYR3)
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- as.data.table(Users)[Questions, on = c(Id = "OwnerUserId")]
Questions <- setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews, na.last=NA)[1:10]
Questions <- setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews, na.last)[1:10]
Questions <- setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews)[1:10]
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- as.data.table(Users)[Questions, on = c(Id = "OwnerUserId")]
Questions <- as.data.table(Posts)[PostTypeId=1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId][!is.na(OwnerUserId)]
Questions <- as.data.table(Users)[Questions, on = c(Id = "OwnerUserId")]
Questions <- setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews)[1:10]
all_equal(Questions, DPLYR3)
table_3 <- function(Posts, Users){
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId][!is.na(OwnerUserId)]
Questions <- as.data.table(Users)[Questions, on = c(Id = "OwnerUserId")]
setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews)[1:10]
}
TABLE3=table_3(Posts, Users)
all_equal(DPLYR3, TABLE3)
remove(Questions)
microbenchmark(sql_3(Posts), base_3(Posts), dplyr_3(Posts), table_3(Posts))
microbenchmark(sql_3(Posts,Users), base_3(Posts,Users), dplyr_3(Posts,Users), table_3(Posts, Users))
library('sqldf')
sql_4 <- function(Posts, Users){
sqldf("SELECT DisplayName, QuestionsNumber, AnswersNumber, Location, Reputation, UpVotes, DownVotes
FROM (
SELECT *
FROM (
SELECT COUNT(*) as AnswersNumber, OwnerUserId
FROM Posts
WHERE PostTypeId = 2
GROUP BY OwnerUserId
) AS Answers
JOIN
(
SELECT COUNT(*) as QuestionsNumber, OwnerUserId
FROM Posts
WHERE PostTypeId = 1
GROUP BY OwnerUserId
) AS Questions
ON Answers.OwnerUserId = Questions.OwnerUserId
WHERE AnswersNumber > QuestionsNumber
ORDER BY AnswersNumber DESC
LIMIT 5
) AS PostsCounts
JOIN Users
ON PostsCounts.OwnerUserId = Users.Id")
}
SQLDF4 <- sql_4(Posts, Users)
View(SQLDF4)
View(Users)
View(Posts)
costam <- aggregate(ViewCount ~ OwnerUserId, data = Posts[Posts$PostTypeId == 2,], FUN = length)
costam <- aggregate(ViewCount ~ OwnerUserId, data = Posts[Posts$PostTypeId == 2,], FUN = function(x) length(x))
costam <- aggregate(Views ~ OwnerUserId, data = Posts[Posts$PostTypeId == 2,], FUN = length)
costam <- aggregate(Id ~ OwnerUserId, data = Posts[Posts$PostTypeId == 2,], FUN = length)
View(costam)
costam <- aggregate(ViewCount ~ OwnerUserId, data = Posts[Posts$PostTypeId == 2,], FUN = length)
test <- Posts[Posts$OwnerUserId==8]
test <- Posts[Posts$OwnerUserId==8,]
View(test)
test <- Posts[Posts$OwnerUserId==8 && !is.na(Posts$OwnerUserId),]
test <- Posts[Posts$OwnerUserId==8 ,]
test <- Posts[!is.na(Posts$OwnerUserId),]
tescior <- test[test$OwnerUserId==8,]
View(tescior)
tescior <- test[test$OwnerUserId==9,]
}
tescior <- test[test$OwnerUserId==11,]
costam <-Posts[Posts$PostTypeId == 2,]
costam <- aggregate(ViewCount ~ OwnerUserId, data = costam, FUN = length)
costam <- aggregate(ViewCount ~ OwnerUserId, data = costam, FUN = FUN = function(x) length(x))
costam <- aggregate(ViewCount ~ OwnerUserId, data = costam, FUN = function(x) length(x))
costam <- aggregate(Title ~ OwnerUserId, data = costam, FUN = function(x) length(x))
test <- Posts[!is.na(Posts$OwnerUserId),]
tescior <- test[test$OwnerUserId==26,]
test <- Posts[Posts$PostTypeId == 2,][!is.na(Posts$OwnerUserId),]
tescior <- test[test$OwnerUserId==26,]
test <- Posts[!is.na(Posts$OwnerUserId),]
test <- test[test$PostTypeId==2]
test <- test[test$PostTypeId==2,]
tescior <- test[test$OwnerUserId==26,]
tescior <- test[test$OwnerUserId==9,]
tescior <- test[test$OwnerUserId==11,]
names(costam)[2]="AnswersNumber"
remove(tescior, test)
cosinnegotam <- Posts[Posts$PostTypeId==1]
cosinnegotam <- Posts[Posts$PostTypeId==1,]
cosinnegotam <- aggregate(Title ~ OwnerUserId, data=cosinnegotam, FUN = function(x) length(x))
View(cosinnegotam)
test <- Posts[!is.na(Posts$PostTypeId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==26,]
View(test)
test <- Posts[!is.na(Posts$PostTypeId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==26,]
test <- Posts[!is.na(Posts$PostTypeId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==26 && !is.na(test$OwnerUserId),]
test <- Posts[!is.na(Posts$OwnerUserId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==26  ,]
test <- test[test$OwnerUserId==30  ,]
test <- Posts[!is.na(Posts$OwnerUserId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==30  ,]
test <- Posts[!is.na(Posts$OwnerUserId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==44  ,]
remove(test)
costam <-Posts[Posts$PostTypeId == 2,]
costam <- aggregate(Title ~ OwnerUserId, data = costam, FUN = function(x) length(x))
names(costam)[2]="AnswersNumber"
cosinnegotam <- Posts[Posts$PostTypeId==1,]
cosinnegotam <- aggregate(Title ~ OwnerUserId, data=cosinnegotam, FUN = function(x) length(x))
names(cosinnegotam)[2]="QuestionsNumber"
merge(costam, cosinnegotam, by.x="OwnerUserId", by.y="OwnerUserId",) -> zmerdz
View(zmerdz)
zmerdz[zmerdz$AnswersNumber>zmerdz$QuestionsNumber, ] -> zmerdz
zmerdz[order(-zmerdz$AnswersNumber)] -> zmerdz
zmerdz[order(-zmerdz$AnswersNumber),] -> zmerdz
zmerdz[1:5] -> zmerdz
zmerdz[1:5,] -> zmerdz
merge(zmerdz, Users, by.x="OwnerUserId", by.y="Id", ) -> wyn
View(wyn)
merge(zmerdz, Users[,], by.x="OwnerUserId", by.y="Id", ) -> jzmerdz
View(jzmerdz)
wyn <- jzmerdz[0, c("DisplayName", "QuestionsNumber", "AnswersNumber", "Location", "Reputation", "UpVotes", "DownVotes")]
wyn <- jzmerdz[, c("DisplayName", "QuestionsNumber", "AnswersNumber", "Location", "Reputation", "UpVotes", "DownVotes")]
all.equal(SQLDF4, wyn)
all.equal(SQLDF4, wyn, ignore_row_order=TRUE)
wyn <- wyn[order(-wyn$AnswersNumber)]
costam <-Posts[Posts$PostTypeId == 2,]
costam <- aggregate(Title ~ OwnerUserId, data = costam, FUN = function(x) length(x))
names(costam)[2]="AnswersNumber"
cosinnegotam <- Posts[Posts$PostTypeId==1,]
cosinnegotam <- aggregate(Title ~ OwnerUserId, data=cosinnegotam, FUN = function(x) length(x))
names(cosinnegotam)[2]="QuestionsNumber"
merge(costam, cosinnegotam, by.x="OwnerUserId", by.y="OwnerUserId",) -> zmerdz
zmerdz[zmerdz$AnswersNumber>zmerdz$QuestionsNumber, ] -> zmerdz
zmerdz[order(-zmerdz$AnswersNumber),] -> zmerdz
zmerdz[1:5,] -> zmerdz
merge(zmerdz, Users[,], by.x="OwnerUserId", by.y="Id", ) -> jzmerdz
wyn <- jzmerdz[, c("DisplayName", "QuestionsNumber", "AnswersNumber", "Location", "Reputation", "UpVotes", "DownVotes")]
wyn <- wyn[order(-wyn$AnswersNumber),]
all.equal(SQLDF4, wyn, ignore_row_order=TRUE)
install.packages('compare')
library(compare)
compare(wyn, SQLDF4)
all.equal(SQLDF4, wyn, ignore_row_order=TRUE)
remove(jzmerdz, costam, cosinnegotam)
remove(zmerdz, wyn)
base_4 <- function(Posts, Users){
costam <-Posts[Posts$PostTypeId == 2,]
costam <- aggregate(Title ~ OwnerUserId, data = costam, FUN = function(x) length(x))
names(costam)[2]="AnswersNumber"
cosinnegotam <- Posts[Posts$PostTypeId==1,]
cosinnegotam <- aggregate(Title ~ OwnerUserId, data=cosinnegotam, FUN = function(x) length(x))
names(cosinnegotam)[2]="QuestionsNumber"
merge(costam, cosinnegotam, by.x="OwnerUserId", by.y="OwnerUserId",) -> zmerdz
zmerdz[zmerdz$AnswersNumber>zmerdz$QuestionsNumber, ] -> zmerdz
zmerdz[order(-zmerdz$AnswersNumber),] -> zmerdz
zmerdz[1:5,] -> zmerdz
merge(zmerdz, Users[,], by.x="OwnerUserId", by.y="Id", ) -> jzmerdz
wyn <- jzmerdz[, c("DisplayName", "QuestionsNumber", "AnswersNumber", "Location", "Reputation", "UpVotes", "DownVotes")]
}
BASE4 <- base_4(Posts, Users)
all.equal(BASE4, SQLDF4)
View(BASE4)
row.names(BASE4)
row.names(SQLDF4)
all.equal(BASE4, SQLDF4, ignore_row_order=TRUE)
