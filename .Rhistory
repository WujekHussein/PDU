filter(PostTypeId==1) %>%
group_by(OwnerUserId) %>%
summarise(TotalViews=sum(ViewCount)) %>%
inner_join(Users, by=c("OwnerUserId"="Id")) %>%
select(Id=OwnerUserId, DisplayName, TotalViews) %>%
arrange(-TotalViews) %>%
slice(1:10) -> pok
all_equal(pok, BASE3)
remove(check, pok)
dplyr_3 <- function(Posts, Users){
Posts %>%
filter(PostTypeId==1) %>%
group_by(OwnerUserId) %>%
summarise(TotalViews=sum(ViewCount)) %>%
inner_join(Users, by=c("OwnerUserId"="Id")) %>%
select(Id=OwnerUserId, DisplayName, TotalViews) %>%
arrange(-TotalViews) %>%
slice(1:10)
}
DPLYR3 <- dplyr_3(Posts, Users)
all_equal(DPLYR3, BASE3)
Questions <- as.data.table(Posts)[OwnerUserId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
View(Questions)
Questions <- as.data.table(Posts)[OwnerUserId=1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- Users[Questions, on=c(Id="OwnerUserId")]
Questions <- Users[Questions, on = c(Id = "OwnerUserId")]
Questions <- Users[Questions, on = c(Id == "OwnerUserId")]
Questions <- as.data.table(Users)[Questions, on = c(Id == "OwnerUserId")]
Questions <- as.data.table(Users)[Questions, on = c(Id = "OwnerUserId")]
table_1 <- function(Users){
wyn <- setorder(as.data.table(Users)[Location!='', .(TotalUpVotes=sum(UpVotes)), by=Location], -TotalUpVotes)[1:10] #wszystko w jednej linii, bo mogÄ™
}
TABLE1 <- table_1(Users)
View(TABLE1)
all_equal(DPLYR1, TABLE1)
Questions <- setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews)[1:10]
all_equal(Questions,DPLYR3)
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- as.data.table(Users)[Questions, on = c(Id = "OwnerUserId")]
Questions <- setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews, na.last=NA)[1:10]
Questions <- setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews, na.last)[1:10]
Questions <- setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews)[1:10]
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- as.data.table(Users)[Questions, on = c(Id = "OwnerUserId")]
Questions <- as.data.table(Posts)[PostTypeId=1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId]
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId][!is.na(OwnerUserId)]
Questions <- as.data.table(Users)[Questions, on = c(Id = "OwnerUserId")]
Questions <- setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews)[1:10]
all_equal(Questions, DPLYR3)
table_3 <- function(Posts, Users){
Questions <- as.data.table(Posts)[PostTypeId==1, .(TotalViews=sum(ViewCount)), by=OwnerUserId][!is.na(OwnerUserId)]
Questions <- as.data.table(Users)[Questions, on = c(Id = "OwnerUserId")]
setorder(Questions[, .(Id, DisplayName, TotalViews)], -TotalViews)[1:10]
}
TABLE3=table_3(Posts, Users)
all_equal(DPLYR3, TABLE3)
remove(Questions)
microbenchmark(sql_3(Posts), base_3(Posts), dplyr_3(Posts), table_3(Posts))
microbenchmark(sql_3(Posts,Users), base_3(Posts,Users), dplyr_3(Posts,Users), table_3(Posts, Users))
library('sqldf')
sql_4 <- function(Posts, Users){
sqldf("SELECT DisplayName, QuestionsNumber, AnswersNumber, Location, Reputation, UpVotes, DownVotes
FROM (
SELECT *
FROM (
SELECT COUNT(*) as AnswersNumber, OwnerUserId
FROM Posts
WHERE PostTypeId = 2
GROUP BY OwnerUserId
) AS Answers
JOIN
(
SELECT COUNT(*) as QuestionsNumber, OwnerUserId
FROM Posts
WHERE PostTypeId = 1
GROUP BY OwnerUserId
) AS Questions
ON Answers.OwnerUserId = Questions.OwnerUserId
WHERE AnswersNumber > QuestionsNumber
ORDER BY AnswersNumber DESC
LIMIT 5
) AS PostsCounts
JOIN Users
ON PostsCounts.OwnerUserId = Users.Id")
}
SQLDF4 <- sql_4(Posts, Users)
View(SQLDF4)
View(Users)
View(Posts)
costam <- aggregate(ViewCount ~ OwnerUserId, data = Posts[Posts$PostTypeId == 2,], FUN = length)
costam <- aggregate(ViewCount ~ OwnerUserId, data = Posts[Posts$PostTypeId == 2,], FUN = function(x) length(x))
costam <- aggregate(Views ~ OwnerUserId, data = Posts[Posts$PostTypeId == 2,], FUN = length)
costam <- aggregate(Id ~ OwnerUserId, data = Posts[Posts$PostTypeId == 2,], FUN = length)
View(costam)
costam <- aggregate(ViewCount ~ OwnerUserId, data = Posts[Posts$PostTypeId == 2,], FUN = length)
test <- Posts[Posts$OwnerUserId==8]
test <- Posts[Posts$OwnerUserId==8,]
View(test)
test <- Posts[Posts$OwnerUserId==8 && !is.na(Posts$OwnerUserId),]
test <- Posts[Posts$OwnerUserId==8 ,]
test <- Posts[!is.na(Posts$OwnerUserId),]
tescior <- test[test$OwnerUserId==8,]
View(tescior)
tescior <- test[test$OwnerUserId==9,]
}
tescior <- test[test$OwnerUserId==11,]
costam <-Posts[Posts$PostTypeId == 2,]
costam <- aggregate(ViewCount ~ OwnerUserId, data = costam, FUN = length)
costam <- aggregate(ViewCount ~ OwnerUserId, data = costam, FUN = FUN = function(x) length(x))
costam <- aggregate(ViewCount ~ OwnerUserId, data = costam, FUN = function(x) length(x))
costam <- aggregate(Title ~ OwnerUserId, data = costam, FUN = function(x) length(x))
test <- Posts[!is.na(Posts$OwnerUserId),]
tescior <- test[test$OwnerUserId==26,]
test <- Posts[Posts$PostTypeId == 2,][!is.na(Posts$OwnerUserId),]
tescior <- test[test$OwnerUserId==26,]
test <- Posts[!is.na(Posts$OwnerUserId),]
test <- test[test$PostTypeId==2]
test <- test[test$PostTypeId==2,]
tescior <- test[test$OwnerUserId==26,]
tescior <- test[test$OwnerUserId==9,]
tescior <- test[test$OwnerUserId==11,]
names(costam)[2]="AnswersNumber"
remove(tescior, test)
cosinnegotam <- Posts[Posts$PostTypeId==1]
cosinnegotam <- Posts[Posts$PostTypeId==1,]
cosinnegotam <- aggregate(Title ~ OwnerUserId, data=cosinnegotam, FUN = function(x) length(x))
View(cosinnegotam)
test <- Posts[!is.na(Posts$PostTypeId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==26,]
View(test)
test <- Posts[!is.na(Posts$PostTypeId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==26,]
test <- Posts[!is.na(Posts$PostTypeId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==26 && !is.na(test$OwnerUserId),]
test <- Posts[!is.na(Posts$OwnerUserId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==26  ,]
test <- test[test$OwnerUserId==30  ,]
test <- Posts[!is.na(Posts$OwnerUserId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==30  ,]
test <- Posts[!is.na(Posts$OwnerUserId),]
test <- test[test$PostTypeId==1,]
test <- test[test$OwnerUserId==44  ,]
remove(test)
costam <-Posts[Posts$PostTypeId == 2,]
costam <- aggregate(Title ~ OwnerUserId, data = costam, FUN = function(x) length(x))
names(costam)[2]="AnswersNumber"
cosinnegotam <- Posts[Posts$PostTypeId==1,]
cosinnegotam <- aggregate(Title ~ OwnerUserId, data=cosinnegotam, FUN = function(x) length(x))
names(cosinnegotam)[2]="QuestionsNumber"
merge(costam, cosinnegotam, by.x="OwnerUserId", by.y="OwnerUserId",) -> zmerdz
View(zmerdz)
zmerdz[zmerdz$AnswersNumber>zmerdz$QuestionsNumber, ] -> zmerdz
zmerdz[order(-zmerdz$AnswersNumber)] -> zmerdz
zmerdz[order(-zmerdz$AnswersNumber),] -> zmerdz
zmerdz[1:5] -> zmerdz
zmerdz[1:5,] -> zmerdz
merge(zmerdz, Users, by.x="OwnerUserId", by.y="Id", ) -> wyn
View(wyn)
merge(zmerdz, Users[,], by.x="OwnerUserId", by.y="Id", ) -> jzmerdz
View(jzmerdz)
wyn <- jzmerdz[0, c("DisplayName", "QuestionsNumber", "AnswersNumber", "Location", "Reputation", "UpVotes", "DownVotes")]
wyn <- jzmerdz[, c("DisplayName", "QuestionsNumber", "AnswersNumber", "Location", "Reputation", "UpVotes", "DownVotes")]
all.equal(SQLDF4, wyn)
all.equal(SQLDF4, wyn, ignore_row_order=TRUE)
wyn <- wyn[order(-wyn$AnswersNumber)]
costam <-Posts[Posts$PostTypeId == 2,]
costam <- aggregate(Title ~ OwnerUserId, data = costam, FUN = function(x) length(x))
names(costam)[2]="AnswersNumber"
cosinnegotam <- Posts[Posts$PostTypeId==1,]
cosinnegotam <- aggregate(Title ~ OwnerUserId, data=cosinnegotam, FUN = function(x) length(x))
names(cosinnegotam)[2]="QuestionsNumber"
merge(costam, cosinnegotam, by.x="OwnerUserId", by.y="OwnerUserId",) -> zmerdz
zmerdz[zmerdz$AnswersNumber>zmerdz$QuestionsNumber, ] -> zmerdz
zmerdz[order(-zmerdz$AnswersNumber),] -> zmerdz
zmerdz[1:5,] -> zmerdz
merge(zmerdz, Users[,], by.x="OwnerUserId", by.y="Id", ) -> jzmerdz
wyn <- jzmerdz[, c("DisplayName", "QuestionsNumber", "AnswersNumber", "Location", "Reputation", "UpVotes", "DownVotes")]
wyn <- wyn[order(-wyn$AnswersNumber),]
all.equal(SQLDF4, wyn, ignore_row_order=TRUE)
install.packages('compare')
library(compare)
compare(wyn, SQLDF4)
all.equal(SQLDF4, wyn, ignore_row_order=TRUE)
remove(jzmerdz, costam, cosinnegotam)
remove(zmerdz, wyn)
base_4 <- function(Posts, Users){
costam <-Posts[Posts$PostTypeId == 2,]
costam <- aggregate(Title ~ OwnerUserId, data = costam, FUN = function(x) length(x))
names(costam)[2]="AnswersNumber"
cosinnegotam <- Posts[Posts$PostTypeId==1,]
cosinnegotam <- aggregate(Title ~ OwnerUserId, data=cosinnegotam, FUN = function(x) length(x))
names(cosinnegotam)[2]="QuestionsNumber"
merge(costam, cosinnegotam, by.x="OwnerUserId", by.y="OwnerUserId",) -> zmerdz
zmerdz[zmerdz$AnswersNumber>zmerdz$QuestionsNumber, ] -> zmerdz
zmerdz[order(-zmerdz$AnswersNumber),] -> zmerdz
zmerdz[1:5,] -> zmerdz
merge(zmerdz, Users[,], by.x="OwnerUserId", by.y="Id", ) -> jzmerdz
wyn <- jzmerdz[, c("DisplayName", "QuestionsNumber", "AnswersNumber", "Location", "Reputation", "UpVotes", "DownVotes")]
}
BASE4 <- base_4(Posts, Users)
all.equal(BASE4, SQLDF4)
View(BASE4)
row.names(BASE4)
row.names(SQLDF4)
all.equal(BASE4, SQLDF4, ignore_row_order=TRUE)
library('dplyr')
Posts %>%
filter(PostTypeId==2) %>%
group_by(OwnerUserId) %>%
summarise(AnswersNumber = n() ) -> Answers
View(Answers)
Posts %>%
filter(PostTypeId==1) %>%
group_by(OwnerUserId) %>%
summarise(QuestionsNumber = n() ) -> Questions
View(Questions)
Answers %>%
inner_join(Questions, by=c("OwnerUserId"="OwnerUserId")) %>%
filter(AnswersNumber>QuestionsNumber) %>%
arrange(-AnswersNumber) %>%
slice(1:5) -> PostsCounts
View(PostsCounts)
Answers %>%
filter(!is.na(OwnerUserId)) -> Answers
Questions %>%
filter(!is.na(OwnerUserId)) -> Questions
Answers %>%
inner_join(Questions, by=c("OwnerUserId"="OwnerUserId")) %>%
filter(AnswersNumber>QuestionsNumber) %>%
arrange(-AnswersNumber) %>%
slice(1:5) -> PostsCounts
PostsCounts %>%
inner_join(Users, by=c("OwnerUserId"="Id")) %>%
select(DisplayName, QuestionsNumber, AnswersNumber, Location, Reputation, UpVotes, DownVotes) -> wyn
View(wyn)
all_equal(wyn. SQLDF4)
all_equal(wyn, SQLDF4)
dplyr_4 <- function(Posts, Users){
Posts %>%
filter(PostTypeId==2) %>%
group_by(OwnerUserId) %>%
summarise(AnswersNumber = n() ) -> Answers
Posts %>%
filter(PostTypeId==1) %>%
group_by(OwnerUserId) %>%
summarise(QuestionsNumber = n() ) -> Questions
Answers %>%
filter(!is.na(OwnerUserId)) -> Answers
Questions %>%
filter(!is.na(OwnerUserId)) -> Questions
Answers %>%
inner_join(Questions, by=c("OwnerUserId"="OwnerUserId")) %>%
filter(AnswersNumber>QuestionsNumber) %>%
arrange(-AnswersNumber) %>%
slice(1:5) -> PostsCounts
PostsCounts %>%
inner_join(Users, by=c("OwnerUserId"="Id")) %>%
select(DisplayName, QuestionsNumber, AnswersNumber, Location, Reputation, UpVotes, DownVotes)
}
remove(wyn, Questions, Answers, PostsCounts)
DPLYR4 <- dplyr_4(Posts, Users)
# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem
#all_equal(SQLDF4, BASE4, ignore_row_order = TRUE) #niewiadomo czemu nie zwraca
#TRUE, jako Å¼e mamy tylko 5 wierszy moÅ¼na porÃ³wnaÄ‡ wyÅ›wietlajÄ…c ramki i przekonaÄ‡
#siÄ™, Å¼e wychodzi to samo
all_equal(SQLDF4, DPLYR4)
library(data.table)
Answers <- as.data.frame(Posts)[PostTypeId==2, AnwersNumber = .N, by= OwnerUserId]
Answers <- as.data.frame(Posts)[PostTypeId==2, .(AnwersNumber = .N), by= OwnerUserId]
as.data.table(Posts)[PostTypeId==2, .(AnwersNumber = .N), by= OwnerUserId]
Answers <- as.data.table(Posts)[PostTypeId==2, .(AnwersNumber = .N), by= OwnerUserId]
Posts %>%
filter(PostTypeId==2) %>%
group_by(OwnerUserId) %>%
summarise(AnswersNumber = n() ) -> Answers
Answers %>%
filter(!is.na(OwnerUserId)) -> Answers
Answers <- as.data.table(Posts)[PostTypeId==2, .(AnwersNumber = .N), by= OwnerUserId]
Answers <- as.data.table(Posts)[PostTypeId==2 && !is.na(OwnerUserId), .(AnwersNumber = .N), by= OwnerUserId]
Answers <- as.data.table(Posts)[PostTypeId==2 & !is.na(OwnerUserId), .(AnwersNumber = .N), by= OwnerUserId]
View(Answers)
Answers <- as.data.table(Posts)[PostTypeId==2 & !is.na(OwnerUserId), .(AnwersNumber = .N), by= OwnerUserId]
Questions <- as.data.table(Posts)[PostTypeId==1 & !is.na(OwnerUserId), .(QuestionsNumber = .N), by=OwnerUserId]
View(Questions)
PostsCounts <- Answers[Questions, on=c(OwnerUserId="OwnerUserId")]
View(PostsCounts)
PostsCounts <- Questions[Answers, on=c(OwnerUserId="OwnerUserId")]
PostsCounts <- Questions[Answers, on=c(OwnerUserId="OwnerUserId")][!is.na(QuestionsNumber)]
PostsCounts <- Questions[Answers, on=c(OwnerUserId="OwnerUserId")][!is.na(QuestionsNumber)][AnswersNumber>QuestionsNumber]
Answers <- as.data.table(Posts)[PostTypeId==2 & !is.na(OwnerUserId), .(AnswersNumber = .N), by= OwnerUserId]
Questions <- as.data.table(Posts)[PostTypeId==1 & !is.na(OwnerUserId), .(QuestionsNumber = .N), by=OwnerUserId]
PostsCounts <- Questions[Answers, on=c(OwnerUserId="OwnerUserId")][!is.na(QuestionsNumber)][AnswersNumber>QuestionsNumber]
PostsCounts <- setorder(PostsCounts, -AnswersNumber)[1:5]
wyn <- as.data.table(Users)[PostsCounts, on=c(Id="OwnerUserId")][, .(DisplayName, QuestionsNumber, AnswersNumber, Location, Reputation, UpVotes, DownVotes)]
View(wyn)
all_equal(wyn, SQLDF4)
table_4 <- function(Posts, Users){
Answers <- as.data.table(Posts)[PostTypeId==2 & !is.na(OwnerUserId), .(AnswersNumber = .N), by= OwnerUserId]
Questions <- as.data.table(Posts)[PostTypeId==1 & !is.na(OwnerUserId), .(QuestionsNumber = .N), by=OwnerUserId]
PostsCounts <- Questions[Answers, on=c(OwnerUserId="OwnerUserId")][!is.na(QuestionsNumber)][AnswersNumber>QuestionsNumber]
PostsCounts <- setorder(PostsCounts, -AnswersNumber)[1:5]
as.data.table(Users)[PostsCounts, on=c(Id="OwnerUserId")][, .(DisplayName, QuestionsNumber, AnswersNumber, Location, Reputation, UpVotes, DownVotes)]
}
TABLE4 <- table_4(Posts, Users)
all_equal(SQLDF4, TABLE4)
library('microbenchmark')
# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem
#all_equal(SQLDF4, BASE4, ignore_row_order = TRUE) #niewiadomo czemu nie zwraca
#TRUE, jako Å¼e mamy tylko 5 wierszy moÅ¼na porÃ³wnaÄ‡ wyÅ›wietlajÄ…c ramki i przekonaÄ‡
#siÄ™, Å¼e wychodzi to samo
#all_equal(SQLDF4, DPLYR4)
#all_equal(SQLDF4, TABLE4)
# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem
microbenchmark(sql_4(Posts,Users), base_4(Posts,Users), dplyr_4(Posts,Users), table_4(Posts, Users))
library('sqldf')
# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem
#all_equal(SQLDF4, BASE4, ignore_row_order = TRUE) #niewiadomo czemu nie zwraca
#TRUE, jako Å¼e mamy tylko 5 wierszy moÅ¼na porÃ³wnaÄ‡ wyÅ›wietlajÄ…c ramki i przekonaÄ‡
#siÄ™, Å¼e wychodzi to samo
#all_equal(SQLDF4, DPLYR4)
#all_equal(SQLDF4, TABLE4)
# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem
microbenchmark(sql_4(Posts,Users), base_4(Posts,Users), dplyr_4(Posts,Users), table_4(Posts, Users))
sqlm_5 <- function(Posts, Comments, Users){
CmtTotScr <- sqldf('SELECT PostId, SUM(Score) AS CommentsTotalScore
FROM Comments
GROUP BY PostId')
PostsBestComments <- sqldf('
SELECT Posts.OwnerUserId, Posts.Title, Posts.CommentCount, Posts.ViewCount,
CmtTotScr.CommentsTotalScore
FROM CmtTotScr
JOIN Posts ON Posts.Id = CmtTotScr.PostId
WHERE Posts.PostTypeId=1')
sqldf('SELECT Title, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location
FROM PostsBestComments
JOIN Users ON PostsBestComments.OwnerUserId = Users.Id
ORDER BY CommentsTotalScore DESC
LIMIT 10')
}
SQLM5 <- sqlm_5(Posts, Comments, Users)
all_equal(SQLDF5, SQLM5)
sql_5 <- function(Posts, Comments, Users){
CmtTotScr <- sqldf('SELECT PostId, SUM(Score) AS CommentsTotalScore
FROM Comments
GROUP BY PostId')
PostsBestComments <- sqldf('
SELECT Posts.OwnerUserId, Posts.Title, Posts.CommentCount, Posts.ViewCount,
CmtTotScr.CommentsTotalScore
FROM CmtTotScr
JOIN Posts ON Posts.Id = CmtTotScr.PostId
WHERE Posts.PostTypeId=1')
sqldf('SELECT Title, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location
FROM PostsBestComments
JOIN Users ON PostsBestComments.OwnerUserId = Users.Id
ORDER BY CommentsTotalScore DESC
LIMIT 10')
}
remove(sqlm_5, SQLM5)
sqlm_3 <- function(Posts, Users){
Questions <- sqldf(
'SELECT OwnerUserId, SUM(ViewCount) as TotalViews
FROM Posts
WHERE PostTypeId = 1
GROUP BY OwnerUserId')
sqldf("
SELECT Id, DisplayName, TotalViews
FROM Questions
JOIN Users
ON Users.Id = Questions.OwnerUserId
ORDER BY TotalViews DESC
LIMIT 10")
}
SQLM3 <- sqlm_3(Posts, Users)
all_equal(SQLDF3, SQLM3)
sql_3 <- function(Posts, Users){
Questions <- sqldf(
'SELECT OwnerUserId, SUM(ViewCount) as TotalViews
FROM Posts
WHERE PostTypeId = 1
GROUP BY OwnerUserId')
sqldf("
SELECT Id, DisplayName, TotalViews
FROM Questions
JOIN Users
ON Users.Id = Questions.OwnerUserId
ORDER BY TotalViews DESC
LIMIT 10")
}
remove(sqlm_3, SQLM3)
# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem
#all_equal(SQLDF3, BASE3)
#all_equal(DPLYR3, BASE3)
#all_equal(DPLYR3, TABLE3)
# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem
microbenchmark(sql_3(Posts,Users), base_3(Posts,Users), dplyr_3(Posts,Users), table_3(Posts, Users))
# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem
#all_equal(SQLDF2,BASE2)
#all_equal(SQLDF2,DPLYR2)
#all_equal(TABLE2, SQLDF2)
# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem
microbenchmark(sql_2(Posts), base_2(Posts), dplyr_2(Posts), table_2(Posts))
# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem
#all_equal(SQLDF1,BASE1)
#all_equal(SQLDF1,DPLYR1)
#all_equal(SQLDF1,TABLE1)
# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem
microbenchmark(sql_1(Users), base_1(Users), dplyr_1(Users), table_1(Users))
CmtTotScr <- aggregate(Score~PostId,data=Comments, FUN=sum)
remove(wyn, PostsVounts, Questions, Answers)
remove(wyn, PostsCounts, Questions, Answers)
View(CmtTotScr)
names(CmtTotScr)[2] <- "CommentsTotalScore"
PostsBestComments <- merge(CmtTotScr, Posts, by.x="PostId", b.y="Id")
PostsBestComments <- merge(CmtTotScr, Posts, by.x="PostId", by.y="Id")
View(PostsBestComments)
PostsBestComments <- merge(CmtTotScr, Posts, by.x="PostId", by.y="Id")[PostTypeId==1, c("OwnerUserId", "Title", "CommentCount", "ViewCount", "CommentsTotalScore")]
PostsBestComments <- PostsBestComments[PostsBestComments$PostTypeId==1, c("OwnerUserId", "Title", "CommentCount", "ViewCount", "CommentsTotalScore")]
wynpra <- merge(PostsBestComments, Users[, c("DisplayName", "Reputation", "Location")], by.x="OwnerUserId", by.y="Id")
wynpra <- merge(PostsBestComments, Users, by.x="OwnerUserId", by.y="Id")
View(wynpra)
View(SQLDF5)
wynpra <- wynpra[order(-wynpra$CommentsTotalScore), c("Title", "CommentCount", "ViewCount", "CommentsTotalScore", "DisplayName", "Reputation","Location")][1:10,]
all_equal(wynpra, SQLDF5)
remove(wynpra, CmtTotScr, PostsBestComments)
base_5 <- function(Posts, Comments, Users){
CmtTotScr <- aggregate(Score~PostId,data=Comments, FUN=sum)
names(CmtTotScr)[2] <- "CommentsTotalScore"
PostsBestComments <- merge(CmtTotScr, Posts, by.x="PostId", by.y="Id")
PostsBestComments <- PostsBestComments[PostsBestComments$PostTypeId==1, c("OwnerUserId", "Title", "CommentCount", "ViewCount", "CommentsTotalScore")]
wynpra <- merge(PostsBestComments, Users, by.x="OwnerUserId", by.y="Id")
wynpra[order(-wynpra$CommentsTotalScore), c("Title", "CommentCount", "ViewCount", "CommentsTotalScore", "DisplayName", "Reputation","Location")][1:10,]
}
BASE5 <- base_5(Posts, Comments, Users)
# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem
all_equal(SQLDF5, BASE5)
Comments %>%
group_by(PostId) %>%
summarise(CommentsTotalScore=sum(Score)) -> CmtTotScr
View(CmtTotScr)
CmtTotScr %>%
inner_join(Posts, by=c("PostId"="Id")) %>%
filter(PostTypeId==1) %>%
select(OwnerUserId, Title, CommentCount, ViewCount, CommentsTotalScore) -> PostsBestComments
View(PostsBestComments)
PostsBestComments %>%
inner_join(Users, by=c("OwnerUserId"="Id")) %>%
select(itle, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location) %>%
arrange(-CommentsTotalScore) %>%
slice(1:10) -> wyn
PostsBestComments %>%
inner_join(Users, by=c("OwnerUserId"="Id")) %>%
select(Title, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location) %>%
arrange(-CommentsTotalScore) %>%
slice(1:10) -> wyn
View(wyn)
all_equal(wyn, SQLDF5)
dplyr_5 <- function(Posts, Comments, Users){
Comments %>%
group_by(PostId) %>%
summarise(CommentsTotalScore=sum(Score)) -> CmtTotScr
CmtTotScr %>%
inner_join(Posts, by=c("PostId"="Id")) %>%
filter(PostTypeId==1) %>%
select(OwnerUserId, Title, CommentCount, ViewCount, CommentsTotalScore) -> PostsBestComments
PostsBestComments %>%
inner_join(Users, by=c("OwnerUserId"="Id")) %>%
select(Title, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location) %>%
arrange(-CommentsTotalScore) %>%
slice(1:10)
}
remove(wyn, CmtTotScr, PostsBestComments)
DPLYR5 <- dplyr_5(Posts, Comments, Users)
# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem
# all_equal(SQLDF5, BASE5)
all_equal(SQLDF5, DPLYR5)
CmtTotScr <- as.data.table(Comments)[, .(CommentsTotalScore=sum(Score)), by=PostId]
View(CmtTotScr)
Comments %>%
group_by(PostId) %>%
summarise(CommentsTotalScore=sum(Score)) -> CmtTotScr
CmtTotScr <- as.data.table(Comments)[, .(CommentsTotalScore=sum(Score)), by=PostId]
PostsBestComments <- as.data.table(Posts)[CmtTotScr,on=c(Id="PostId")][PostTypeId==1][, .(OwnerUserId, Title, CommentCount, ViewCount, CommentsTotalScore)]
View(PostsBestComments)
setorder(as.data.table(Users)[PostsBestComments, on=c(Id="OwnerUserId")][, .(Title, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location)], -CommentsTotalScore)[1:10] -> wyn
View(wyn)
setorder(as.data.table(Users)[PostsBestComments, on=c(Id="OwnerUserId")][, .(Title, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location)][!is.na(DisplayName) & !is.na(Reputation) & !is.na(Location)], -CommentsTotalScore)[1:10] -> wyn
all_equal(SQLDF5, wyn)
remove(wyn, CmtTotScr, PostsBestComments)
table_5 <- function(Posts, Comments, Users){
CmtTotScr <- as.data.table(Comments)[, .(CommentsTotalScore=sum(Score)), by=PostId]
PostsBestComments <- as.data.table(Posts)[CmtTotScr,on=c(Id="PostId")][PostTypeId==1][, .(OwnerUserId, Title, CommentCount, ViewCount, CommentsTotalScore)]
setorder(as.data.table(Users)[PostsBestComments, on=c(Id="OwnerUserId")][, .(Title, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location)][!is.na(DisplayName) & !is.na(Reputation) & !is.na(Location)], -CommentsTotalScore)[1:10] -> wyn
}
TABLE5 <- table_5(Posts, Comments, Users)
# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem
# all_equal(SQLDF5, BASE5)
# all_equal(SQLDF5, DPLYR5)
all_equal(SQLDF5, TABLE5)
table_5 <- function(Posts, Comments, Users){
CmtTotScr <- as.data.table(Comments)[, .(CommentsTotalScore=sum(Score)), by=PostId]
PostsBestComments <- as.data.table(Posts)[CmtTotScr,on=c(Id="PostId")][PostTypeId==1][, .(OwnerUserId, Title, CommentCount, ViewCount, CommentsTotalScore)]
setorder(as.data.table(Users)[PostsBestComments, on=c(Id="OwnerUserId")][, .(Title, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location)][!is.na(DisplayName) & !is.na(Reputation) & !is.na(Location)], -CommentsTotalScore)[1:10]
}
# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem
microbenchmark(sql_5(Posts, Comments, Users), base_5(Posts, Comments, Users), dplyr_5(Posts, Comments, Users), table_5(Posts, Comments, Users))
